options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(SparrowParser)
  public class SparrowParser {}
PARSER_END(SparrowParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < ADDRESS: "@" >   
| < FUNC: "func" >
| < IFZERO: "if0" >
| < GOTO: "goto" >
| < CALL: "call" >
| < ALLOC: "alloc" >
| < PRINT: "print" >
| < ERROR: "error" >
| < RETURN: "return" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN :
{
  < STRINGCONSTANT: "\"" (<LETTER>|<DIGIT>|
                          "\\n"|" "|","|";"|"."|"/"|"?"|":"|"\\\""|"+"|
                          "<"|">"|"{"|"}"|"("|")"|"["|"]")* "\"" >
}

/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


void Program() :
{}
{
  ( FunctionDeclaration() )*
  <EOF>
}

void FunctionDeclaration() :
{}
{
  "func" FunctionName() "(" ( Identifier() )* ")" Block()
}

void Block() :
{}
{
  ( LOOKAHEAD(5) Instruction() )* "return" Identifier()
}

void Instruction() :
{}
{
  LOOKAHEAD(4) LabelWithColon()
| LOOKAHEAD(4) SetInteger()
| LOOKAHEAD(4) SetFuncName()
| LOOKAHEAD(4) Add()
| LOOKAHEAD(4) Subtract()
| LOOKAHEAD(4) Multiply()
| LOOKAHEAD(4) LessThan()
| LOOKAHEAD(4) Load()
| LOOKAHEAD(4) Store()
| LOOKAHEAD(4) Move()
| LOOKAHEAD(3) Alloc()
| LOOKAHEAD(3) Print()
| LOOKAHEAD(3) ErrorMessage()
| LOOKAHEAD(3) Goto()
| LOOKAHEAD(3) IfGoto()
| LOOKAHEAD(3) Call()
}

void LabelWithColon() :
{}
{
  Label() ":"
}

void SetInteger() :
{}
{
  Identifier() "=" IntegerLiteral()
}

void SetFuncName() :
{}
{
  Identifier() "=" "@" FunctionName()
}

void Add() :
{}
{
  Identifier() "=" Identifier() "+" Identifier()
}

void Subtract() :
{}
{
  Identifier() "=" Identifier() "-" Identifier()
}

void Multiply() :
{}
{
  Identifier() "=" Identifier() "*" Identifier()
}

void LessThan() :
{}
{
  Identifier() "=" Identifier() "<" Identifier()
}

void Load() :
{}
{
  Identifier() "=" "[" Identifier() "+" IntegerLiteral() "]"
}

void Store() :
{}
{
  "[" Identifier() "+" IntegerLiteral() "]" "=" Identifier() 
}

void Move() :
{}
{
  Identifier() "=" Identifier()
}

void Alloc() :
{}
{
  Identifier() "=" "alloc" "(" Identifier() ")" 
}

void Print() :
{}
{
  "print" "(" Identifier() ")" 
}

void ErrorMessage() :
{}
{
  "error" "(" StringLiteral() ")" 
  
}

void Goto() :
{}
{
  "goto" Label() 
}

void IfGoto() :
{}
{
  "if0" Identifier() "goto" Label()
}

void Call() :
{}
{
  Identifier() "=" "call" Identifier() "(" ( Identifier() )* ")" 
}

void FunctionName() :
{}
{
  <IDENTIFIER>
}

void Label() :
{}
{
  <IDENTIFIER>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void StringLiteral() :
{}
{
  <STRINGCONSTANT>
}
